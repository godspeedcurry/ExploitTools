import requests,click,time,itertools,json
from concurrent import futures
from tqdm import tqdm
import random
import ssl
banner = """                 _                         _ 
                | |                       | |
  __ _  ___   __| |___ _ __   ___  ___  __| |
 / _` |/ _ \ / _` / __| '_ \ / _ \/ _ \/ _` |
| (_| | (_) | (_| \__ \ |_) |  __/  __/ (_| |
 \__, |\___/ \__,_|___/ .__/ \___|\___|\__,_|
  __/ |               | |                    
 |___/                |_|                    
"""
bar = None
def test(ip_port):
	global bar
	bar.update(1)
	proxy={'https':'socks5://' + ip_port}
	try:
		r = requests.get(url='https://tool.lu/ip/',timeout=10,proxies=proxy,headers={'User-Agent':str(random.randint(0,10000))})
		if ip_port.split(':')[0] in r.content.decode('utf-8'):
			return str(ip_port)
		else:
			return 'ERROR'	
	except Exception as e:
		return 'ERROR'
	
def get_from_file():
	with open('ip.txt','r') as f:
		s = f.read()
	return s.strip().split('\n')

def get_proxy():
	global bar
	click.secho(banner,fg='green')
	ip_ports = get_from_file()
	print(ip_ports)
	bar = tqdm(total=len(ip_ports))
	results = None
	with futures.ThreadPoolExecutor(max_workers=30) as executor:
		results = list(executor.map(test, ip_ports))
	results = [x for x in results if x != 'ERROR']
	print(results)
	bar.close()
	return results

if __name__ == "__main__":
	get_proxy()
